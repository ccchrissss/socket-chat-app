<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.IO chat</title>
    <style>
      body { background-color: #1f1f1f; margin: 0; padding-bottom: 3rem; color: lightgray; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

      button { background-color: #840000; color: lightgray;}
      input { background-color: rgb(17, 17, 96); color: lightgray;}
      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #input:focus { outline: none; }
      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
      #messages > li:nth-child(odd) { background: darkslategray; }
    </style>
  </head>
  <body>
    <h1>Socket Chat App</h1>
    <br />
    <h3>Current Room: </h3>
    <div>
      <!-- create serverside logic so when randomRoomBtn is clicked, socket.joins a random room, or when existingRoomBtn is clicked, socket.joins the specific inputted room -->
       
      <button id="random-room-btn">Join a Random Room</button>
      <br />
      <br />
      <br />
      <br />
      <input id="room-input" autocomplete="off" placeholder="type your room name here!" /><span> Room</span>
      <br />
      <br />
      <button id="existing-room-btn">Join this Existing Rooom</button>
    </div>
    <br />
    <h4>If you are truly a dragon rider you will see your messages appear below</h4>
    <ul id="dragon-text"></ul>
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" placeholder="type your message here!" /><button>Send</button>
      <button id="toggle-btn">Disconnect</button>
    </form>
  <script src="/socket.io/socket.io.js"></script>
  <script> 
    // **********
    // console.log('this is FRONT END js')
    // **********

    // const socket = io()
    const socket = io({
      auth: {
        serverOffset: 0
      }
    });

    const randomRoomBtn = document.getElementById('random-room-btn')
    const existingRoomBtn = document.getElementById('existing-room-btn')
    let currentRoom = ''

    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const toggleButton = document.getElementById('toggle-btn')
    const messages = document.getElementById('messages')
    const dragonText = document.getElementById('dragon-text')
    const dragonMessage = 'This is a top secret message only for the dragon rider'


    // when socket receives 'room greeting' event, do this:
      // alert with a string containing the roomName argument
      // reassign the currentRoom variable to the roomName argument
      // console.log the currentRoom variable to show if it has successfully updated
    socket.on('room greeting', roomName => {
      alert(`Hello, you have entered the ${roomName}`)
      currentRoom = roomName
      console.log('currentRoom: ', currentRoom)
    })

    // when socket receives 'hello' event, do this:
      // console.log the argument that was passed in
    socket.on('hello', the1stArgument => {
      // console.log(the1stArgument)
    })  

    // when socket receives 'good morning' event with multiple arguments, do this:
      // console.log each of the arguments in one string as a template literal
    socket.on('good morning', (lang1, lang2, lang3) => {
      // console.log(`${lang1} | ${lang2} | ${lang3}`)
    })

    // event listener on the #form element. fires upon 'submit' event
      // if html #input element has a value
        // then socket sends (emits) event called 'unicorn', passing in the argument of input.value
        // then socket emits the event 'dragon', passing in the argument of dragonMessage
        // then input.value is reassigned to an empty string
        // then input.placeholder is reassigned to an empty string
    form.addEventListener('submit', e => {
      e.preventDefault();

      if (input.value) {
        socket.emit('unicorn', input.value);
        socket.emit('dragon', dragonMessage)
        // console.log(`socket.emit('unicorn', input.value);`)
        input.value = '';
        input.placeholder = '';
      }
    });

    // event listener on the #toggle-btn element. fires upon 'click' event.
      // if the socket is connected
        // then toggleButton's text changes to 'Connect'
        // then the socket disconnects
      // else
        // then toggleButton's text changes to 'Disconnect'
        // then the socket connects
    toggleButton.addEventListener('click', e => {
      e.preventDefault()
      
      if (socket.connected) {
        toggleButton.innerText = 'Connect'
        socket.disconnect()
      } else {
        toggleButton.innerText = 'Disconnect'
        socket.connect()
      }
    })

    // when socket receives 'chat message' event, passing in the argument of msg, do this:
      // declare a variable called item and assign it to a new li element
      // assign item's text content to msg
      // add item as a child element to messages
      // scroll the window to a height of 0
    socket.on('chat message', (msg, serverOffset) => {
      const item = document.createElement('li');
      item.textContent = msg;
      messages.appendChild(item);
      window.scrollTo(0, document.body.scrollHeight);
      socket.auth.serverOffset = serverOffset
    });

    // when socket receives 'dragon scroll' event, passing the the arg of secretMessage, do this:
      // declare a variable called item2 and assign it to a new li element
      // assign item2's text content to secretMessage
      // add item2 as a child element to dragonText
    // socket.on('dragon scroll', secretMessage => {
    //   // console.log('This is a top secret message only for the dragon rider')
    //   const item2 = document.createElement('li')
    //   item2.textContent = secretMessage
    //   dragonText.appendChild(item2)
    // });

  </script>
  </body>
</html>